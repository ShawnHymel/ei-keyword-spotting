/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 29.09.2020 18:47:20

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 3392;
uint8_t* tensor_arena = NULL;
static uint8_t* current_location;
static uint8_t* tensor_boundary;
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[31];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[15];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const TfArray<1, float> quant0_scale = { 1, { 0.046360891312360764, } };
const TfArray<1, int> quant0_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 10, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[30] = { -44, -76, -39, -60, -84, -50, -81, -81, -82, -93, -99, -34, -77, -18, -63, -76, -23, -62, -62, -96, -58, -33, -9, -72, -60, -40, -127, -56, -82, -58, };
const TfArray<1, int> tensor_dimension2 = { 1, { 30 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0071627474389970303, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int8_t tensor_data3[10] = { -22, -27, -127, 26, -112, -122, -34, 10, -90, -21, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0015976633876562119, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[4] = { -79, -217, -80, 387, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00029975868528708816, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[4*10] = { 
  29, -19, -19, 69, -24, -53, -51, 39, -28, -6, 
  -24, -89, 94, -48, -16, 36, 44, -121, 81, -52, 
  -71, -29, -37, 55, 71, 45, 15, -7, -5, -9, 
  -80, 107, -15, -5, -3, -30, -4, -60, -54, 127, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 4,10 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0090290578082203865, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[30] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension6 = { 1, { 30 } };
const TfArray<30, float> quant6_scale = { 30, { 9.6766860224306583e-05, 0.00011664369230857119, 0.00012413060176186264, 0.0001294561370741576, 7.8972829214762896e-05, 0.00014369309064932168, 0.00010679772822186351, 0.0001107654461520724, 0.00012514121772255749, 8.9166016550734639e-05, 0.00011550555063877255, 0.00015526372590102255, 7.4088377004954964e-05, 0.00010525080870138481, 7.5573829235509038e-05, 9.4754468591418117e-05, 8.1339880125597119e-05, 0.00013462672359310091, 7.96320746303536e-05, 0.00010723881132435054, 0.00021045723406132311, 8.427169086644426e-05, 0.00012084643094567582, 0.00018518509750720114, 0.00022615850321017206, 6.6208420321345329e-05, 8.8434753706678748e-05, 0.00019699295808095485, 9.7587559139356017e-05, 0.00012562787742353976, } };
const TfArray<30, int> quant6_zero = { 30, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[30*1*7*13] = { 
  /* [0][0][][] */ -30,-42,36,-19,-42,8,-99,46,-44,-16,46,-92,45, -6,-62,46,-101,-100,75,-26,-72,45,-18,79,-57,-4, 17,-44,-49,74,-25,70,48,-95,30,-1,-63,18,-22, -89,-2,-86,63,-53,-22,56,-49,-36,32,-4,93,-28, -55,64,-3,-21,-19,6,73,65,55,-2,35,47,8, -95,65,-94,87,22,-84,47,47,-34,19,30,23,-56, -127,24,7,-10,39,9,33,29,-39,-14,-25,-18,-72, 
  /* [1][0][][] */ 57,79,-59,10,12,-17,7,-32,-6,-60,-12,-9,-3, 54,22,-27,33,-39,25,15,-1,17,-39,7,26,2, -65,40,-56,17,-48,-39,18,-11,23,-20,25,-1,16, -81,127,-59,103,-79,-4,39,-49,-16,9,17,22,-7, 2,25,-34,71,-40,52,15,-54,38,-31,-11,4,12, 35,-87,-11,55,-75,95,-51,-15,-20,-10,0,-12,-12, -95,-71,56,51,-52,56,-96,49,-28,14,-14,-6,3, 
  /* [2][0][][] */ -31,5,-48,49,-127,34,56,-51,-11,24,-2,-14,-3, -30,-17,4,17,-34,-11,61,-11,-28,15,3,-7,8, -82,26,-59,38,30,-45,49,34,-55,-22,15,-3,-14, -25,72,16,36,30,-29,36,56,-47,-19,20,26,-21, -41,110,2,42,37,1,-2,34,-10,-42,-46,1,20, 32,75,67,24,19,-18,-20,5,-2,-27,-31,2,-11, -14,17,72,-72,66,-4,-37,-1,0,22,1,-16,-2, 
  /* [3][0][][] */ -62,23,27,5,-65,-75,4,11,37,-18,24,7,40, 75,-8,39,-38,-1,-30,40,-31,32,-26,52,-53,36, 39,-34,-22,-78,-41,-23,38,28,-27,-61,-48,-10,49, -62,-36,-42,-65,-2,31,60,-23,13,15,-6,21,10, -86,27,-42,-29,47,32,-11,-48,-22,16,-4,11,21, -76,-54,-36,-5,8,13,30,15,1,-9,-18,-1,-48, -127,-19,3,3,22,-4,4,9,-35,-5,53,13,7, 
  /* [4][0][][] */ 87,107,106,-17,15,-47,-49,-30,-29,-5,-22,-86,36, 69,77,69,-25,39,-53,-26,-5,-11,-11,-1,-12,13, 36,84,127,-74,23,12,-60,24,-40,46,-42,-37,14, 121,2,120,-73,33,67,-29,4,-46,56,-16,6,25, 23,-12,70,-56,-5,89,-75,-29,1,114,-27,86,10, -22,-30,34,-10,-64,114,7,-21,29,51,19,36,-41, 27,-60,-9,26,-63,78,56,-35,9,-12,15,21,-2, 
  /* [5][0][][] */ 30,63,11,-11,7,23,-33,-23,31,-13,-14,-9,-6, 89,-98,-18,-21,8,-48,-6,20,-7,-12,-6,-10,-12, -25,127,86,24,24,1,-13,18,-27,26,-10,24,-5, -16,-48,-39,26,-43,25,-28,-46,-6,-28,-10,-20,-6, -49,78,17,2,40,-33,1,9,12,24,14,16,0, -94,7,2,-14,-36,-44,3,14,-34,-3,-29,20,-26, -77,16,-72,3,-7,13,31,16,18,-3,-7,4,13, 
  /* [6][0][][] */ -34,120,-89,-40,-29,-56,13,52,-14,-31,-43,36,26, 1,76,-127,7,-54,-4,-7,-18,-5,-47,-24,-16,-41, -19,82,-95,2,10,44,-4,-23,-4,77,-70,25,-31, -14,52,-75,29,2,40,-34,-1,-24,1,-16,-42,8, 16,25,-36,67,41,75,-15,49,7,-4,16,-30,-8, -12,22,12,78,-38,6,-80,3,-29,-5,-8,18,-9, -90,-34,32,39,-75,-11,3,3,-13,15,-16,85,34, 
  /* [7][0][][] */ 53,-55,-17,29,-2,29,-18,20,0,2,0,5,3, 127,-105,-2,39,-25,16,2,-5,29,-12,-20,-25,-4, 91,-31,-36,51,0,32,-3,1,73,-24,12,-16,10, 119,-11,-49,13,-31,30,15,0,60,-18,-24,29,-20, 68,-35,-4,3,-45,-2,14,10,-19,-14,-12,22,5, -48,50,-32,-71,-27,2,-6,-22,-32,2,-22,0,-7, 11,94,-4,-8,-26,9,-49,6,-4,-28,9,43,-28, 
  /* [8][0][][] */ -1,62,-17,66,-68,-34,-45,-87,-24,-12,10,-13,4, -15,19,6,-19,-83,-18,43,8,18,46,1,2,46, 38,4,-26,-54,-62,-25,45,-18,0,-40,48,3,0, -26,-8,-24,-52,-8,-43,60,-43,5,-5,-6,21,-24, 5,-30,-30,-50,4,-25,39,33,37,-4,2,22,-30, 4,-33,-85,-23,64,31,-7,21,35,-3,8,39,18, -127,25,-44,-15,28,6,-28,48,43,26,-12,-22,35, 
  /* [9][0][][] */ 37,22,4,2,50,-45,-49,1,27,-37,-17,-15,-13, -12,-20,-24,-1,15,1,-49,-12,-10,-53,-24,-29,-50, 30,-7,10,12,-52,46,-37,-52,106,-61,23,-37,-12, 6,-20,-73,82,-101,92,-7,2,28,-32,13,-19,67, 41,7,-127,103,-123,80,-23,-17,-2,-16,-11,-5,-1, 33,2,-59,83,-62,71,-51,11,-34,-6,-31,-10,-15, 3,48,-107,91,-100,40,-8,16,-47,48,-11,-4,15, 
  /* [10][0][][] */ -9,-21,-46,22,16,6,1,-27,-4,0,-17,-29,-26, 33,-4,-70,-26,-32,-1,-22,4,1,19,-12,-31,-47, 13,53,-17,-76,-5,-38,-43,-13,7,52,-5,5,-4, 53,58,-31,-127,-38,4,14,-6,-2,-35,11,10,23, 71,83,-52,-90,-19,-67,28,-19,3,0,8,-10,28, 31,115,-43,-63,-7,-48,22,8,41,9,-1,-7,-6, 31,86,-21,-35,-4,-30,60,5,-17,-26,-6,53,-9, 
  /* [11][0][][] */ 68,27,26,46,16,-17,6,30,3,-14,-14,5,-34, -10,-45,2,23,-12,10,3,-20,7,6,15,0,33, -37,60,-31,-50,-34,-54,-2,8,-1,-8,-7,23,22, -93,-16,-8,-27,-48,4,14,-13,16,10,-11,-2,-16, -102,70,-21,-54,-6,-40,26,-5,8,-2,0,-3,23, -91,-99,26,89,-9,41,-1,11,0,0,-15,-3,-23, 127,-19,-15,7,18,3,-1,12,-20,-1,18,-6,8, 
  /* [12][0][][] */ 127,45,-49,-8,96,-97,20,-33,-30,25,-71,45,-13, 100,43,-31,-115,82,-27,-29,68,-88,61,-22,10,-48, 96,4,-7,-64,22,80,-69,111,-5,21,66,-48,-67, 78,7,-84,-16,-13,62,-44,-8,36,-3,-19,14,44, -22,57,-66,92,-12,40,-108,15,67,11,8,48,-17, 30,2,2,12,19,60,-4,-16,22,93,-13,12,31, 10,5,-68,99,29,-1,42,-31,-24,46,-11,-18,-50, 
  /* [13][0][][] */ -59,-119,100,35,0,34,28,-41,38,-30,-21,-31,-9, -127,-8,74,-7,-58,6,27,-80,56,-24,11,29,-100, -65,-56,58,-57,8,-41,-29,41,22,48,51,-41,20, -104,-40,13,-46,-2,10,-11,-5,-18,21,4,-31,43, -13,40,-55,-42,31,-8,-31,22,51,-53,-28,-56,-23, 32,9,-77,-25,9,-61,36,-32,53,3,5,68,8, -37,-61,-123,33,22,-39,29,-82,-23,3,8,-37,-18, 
  /* [14][0][][] */ -43,-49,34,61,58,16,25,46,-70,-21,-7,0,-53, 49,22,-3,94,77,-41,15,-17,11,47,-64,-4,2, 32,-91,29,-13,0,4,77,-94,37,26,-36,-98,-5, 103,-32,5,57,-6,57,-81,-47,31,94,-82,10,15, 69,-100,-25,-26,-21,17,-89,63,-1,3,-55,3,0, 123,-98,127,-17,21,-51,-44,53,-32,-17,-53,-4,22, 79,-35,59,-36,-2,8,-77,58,16,17,-59,35,-19, 
  /* [15][0][][] */ -25,35,56,5,-44,-49,18,-12,-38,-11,-57,8,-2, -3,54,65,8,-70,21,-9,-24,-44,-9,21,-54,48, 108,127,58,-29,-31,-35,5,-38,35,6,-21,-38,-17, 75,86,112,-10,-9,-53,22,-26,11,10,-31,-24,6, 23,3,51,-68,2,6,30,-43,-16,-29,-42,1,-42, -27,-30,-6,-60,10,53,2,-29,-4,14,-45,56,16, 46,-108,23,-24,29,33,34,-11,-5,50,12,45,0, 
  /* [16][0][][] */ -113,-32,-5,-74,26,65,-68,-6,-18,85,-40,20,36, -84,-79,-111,-25,14,-16,-37,34,-3,18,-17,-33,14, -112,-64,-126,-12,57,67,36,12,65,-12,10,-7,20, -83,-40,110,85,-15,-63,46,32,24,71,-7,-46,-62, 42,-4,90,127,45,-46,53,-25,-91,-27,75,27,67, 68,50,38,-37,-45,-11,-83,57,109,-25,46,-51,-24, -4,50,55,36,75,53,35,-36,-54,-92,-12,-26,-23, 
  /* [17][0][][] */ -92,1,14,22,-40,32,-25,16,11,-3,0,12,32, -24,23,-5,55,9,-9,20,-11,-21,27,6,19,-4, 115,-58,-88,-69,-2,0,-9,1,-10,15,-25,-11,7, 17,101,21,82,26,-30,34,-16,-15,0,-6,1,12, 87,8,-80,-62,-11,40,-24,20,-10,-16,25,-8,3, -73,13,60,85,-3,-24,16,6,-39,25,-6,0,-23, -127,36,31,-63,10,10,-14,7,18,-23,10,-6,-11, 
  /* [18][0][][] */ 32,12,104,-74,68,-38,44,45,4,23,34,74,-10, 47,-88,-61,-104,9,-86,50,-1,-14,-40,42,59,-108, 81,-5,24,-81,106,-50,57,-127,0,4,99,-41,65, 63,-11,-41,-68,55,-104,110,-36,-4,-26,39,-4,18, 73,-54,18,3,-75,21,41,-93,-5,-35,49,16,47, 51,3,91,-31,-27,53,14,27,-53,28,-4,12,85, -30,-18,125,47,-14,-12,-13,87,-16,-65,-49,37,-52, 
  /* [19][0][][] */ -27,-14,25,-6,-10,41,-14,27,7,5,-8,-2,13, -29,10,20,31,-11,23,7,-11,-13,3,-25,3,4, -34,53,67,51,-22,-31,-8,5,-22,4,13,-24,-25, 2,127,88,47,-41,8,3,-33,-6,-7,-12,-30,-10, 58,120,114,22,-36,7,8,-34,-4,9,15,-20,-1, 12,72,31,23,-32,-9,-4,-30,-31,-12,1,2,-25, 39,28,35,-40,-17,-18,3,-42,19,12,-13,-48,-6, 
  /* [20][0][][] */ -91,1,9,-12,16,10,1,-5,3,8,5,13,2, -67,29,-30,-16,-3,-7,9,11,-3,2,-3,2,9, 25,-9,0,26,9,2,4,11,-6,-4,-4,-6,-1, 113,-36,-14,-1,-14,0,-13,-5,-1,14,-4,6,10, 62,69,14,13,32,17,4,25,-4,-3,10,5,4, 58,-46,-19,2,-14,4,0,0,-5,0,5,0,9, -127,1,50,19,-4,-3,8,-15,1,2,-9,4,5, 
  /* [21][0][][] */ -39,-50,13,68,9,27,-46,39,-117,28,6,22,54, -10,-79,33,34,33,-24,42,79,24,-66,-2,95,-2, -24,-108,69,-50,28,19,44,-37,2,30,-40,35,-124, 62,-51,38,-8,80,-58,127,-79,59,-13,-14,-102,27, -16,-23,-20,121,-52,30,67,-29,14,-30,38,-75,45, 83,-15,-24,9,55,-62,94,-41,26,43,-1,-38,-50, 67,-76,-38,-3,59,-38,80,-56,69,42,-56,3,35, 
  /* [22][0][][] */ -127,-20,39,-37,-88,-14,-44,-23,-19,11,-51,-5,-39, -72,-89,3,41,-91,41,-12,25,-22,-46,-15,13,-6, 65,-32,12,-34,-9,-37,28,-31,52,-39,37,56,-30, 7,-38,46,-6,-6,14,65,18,-41,-22,1,-29,23, -45,-4,-22,4,-10,-3,-14,-2,60,1,45,1,-27, -85,-21,71,38,-46,-5,-31,-33,24,7,-49,60,-3, -77,-103,35,-38,8,33,-27,-13,55,-40,23,37,-32, 
  /* [23][0][][] */ -76,-10,27,-3,14,-7,-9,10,-3,8,-12,-16,15, -127,31,-21,-5,-11,-17,-2,-6,12,17,14,3,16, -27,-20,-24,-3,11,5,7,7,3,2,-1,8,-1, -4,-56,-5,-11,10,-12,-15,10,0,-8,-22,-12,-8, 58,15,-53,-1,11,-17,18,42,-4,11,16,-10,15, 80,-36,-29,22,-6,-18,14,-7,-8,8,-13,8,3, 59,-1,-34,0,0,28,2,-6,28,0,-14,16,15, 
  /* [24][0][][] */ -32,38,54,-6,-5,-26,16,2,-2,7,26,17,13, 17,2,4,19,-15,-6,10,-2,9,-5,-3,-2,-11, 69,-46,-30,-9,-9,-12,8,-5,16,-3,-3,-10,-3, 82,3,11,11,11,-1,-9,9,-2,-8,3,0,6, 60,42,20,-19,-5,5,19,-10,6,8,4,-5,-1, -42,-43,-48,14,-16,-6,-1,-6,-17,-13,4,1,0, -127,5,30,3,24,-13,5,8,8,1,14,4,11, 
  /* [25][0][][] */ -25,-48,-80,-4,27,-12,-68,13,17,28,-4,55,56, -65,5,-127,77,-22,19,-93,112,-73,-41,38,-50,-44, -76,-72,-10,-41,-42,56,-111,-16,-19,77,-17,9,1, -109,-8,-59,31,93,-9,-105,-67,76,-95,-36,-5,25, -42,-109,4,-9,92,-60,-43,56,33,-17,-40,-4,87, -56,-29,-36,28,3,35,-56,63,116,-33,30,-95,-48, -95,-84,-3,64,-2,11,-67,35,-15,-24,-10,73,-89, 
  /* [26][0][][] */ 81,60,-13,41,-22,43,-12,-59,-5,-11,-13,-23,-45, 80,80,-21,45,-23,55,-19,-34,13,-48,-21,-56,-34, 88,127,-25,3,-43,-14,-1,-25,-3,-32,-45,-33,3, 86,76,-38,-32,43,-34,12,-17,-9,-21,-51,9,-8, 59,56,9,-64,50,-54,32,-6,9,34,-42,15,-13, 66,35,-34,-42,46,-10,-7,-2,-34,9,-22,12,-17, 61,15,-17,-32,30,23,-12,17,-7,-6,-33,-17,-13, 
  /* [27][0][][] */ 127,-66,-4,-28,-38,30,-23,16,-26,-16,4,11,0, 15,-10,29,-24,-28,4,-4,42,0,11,-5,5,-19, -8,9,37,5,12,-5,12,-8,-8,17,-20,9,1, -48,23,55,-35,-3,-45,16,6,4,2,5,4,-18, -7,42,12,-31,5,6,-9,-31,-11,15,-21,5,-25, 5,-60,9,19,-9,-11,20,-5,23,10,20,-5,10, -34,16,38,5,20,-14,-10,-10,-9,0,24,-15,15, 
  /* [28][0][][] */ 52,12,-6,60,29,12,-5,6,-41,-43,19,-6,9, 113,-50,-49,80,17,24,-9,45,33,44,7,-4,11, 95,-54,-10,68,53,-28,49,18,20,-7,31,-41,9, 127,-5,-19,21,23,34,-61,10,55,21,33,1,-4, 64,-118,22,-68,16,-28,47,14,6,2,-7,-25,-1, 35,43,15,-73,-52,20,24,4,-19,13,-20,3,59, 41,74,5,-94,11,-57,-4,-1,-59,-65,6,-21,10, 
  /* [29][0][][] */ 108,49,-80,0,28,24,-20,3,-28,18,9,-20,-18, -1,-11,-61,-82,-23,45,-59,28,25,-32,-19,-4,-14, -46,55,61,-39,17,7,-2,5,-33,32,-12,12,50, -92,-9,85,83,50,-15,18,9,-28,26,-7,-22,-8, -114,42,-63,-40,10,14,-4,15,-4,-12,7,1,-5, 127,10,-25,0,20,-23,11,30,-10,-12,10,30,13, -83,7,31,36,22,24,9,13,-9,40,-22,-32,-8, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 30,1,7,13 } };
const TfArray<30, float> quant7_scale = { 30, { 0.0020872519817203283, 0.0025159933138638735, 0.0026774851139634848, 0.0027923565357923508, 0.0017034363700076938, 0.0030994461849331856, 0.0023036168422549963, 0.0023892000317573547, 0.002699284115806222, 0.0019233025377616286, 0.0024914436507970095, 0.0033490238711237907, 0.0015980792231857777, 0.0022702498827129602, 0.0016301202122122049, 0.0020438448991626501, 0.0017544934526085854, 0.0029038854409009218, 0.0017176562687382102, 0.0023131310008466244, 0.0045395423658192158, 0.0018177323509007692, 0.0026066459249705076, 0.0039944248273968697, 0.0048782173544168472, 0.001428109360858798, 0.0019075291929766536, 0.0042491191998124123, 0.0021049543283879757, 0.0027097812853753567, } };
const TfArray<30, int> quant7_zero = { 30, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 10 } };
const TfArray<10, float> quant8_scale = { 10, { 5.2574196161003783e-05, 7.8106997534632683e-05, 6.4665022364351898e-05, 9.3252107035368681e-05, 8.2975850091315806e-05, 7.8081531682983041e-05, 3.8720452721463516e-05, 0.00010324522008886561, 9.006047184811905e-05, 8.8953856902662665e-05, } };
const TfArray<10, int> quant8_zero = { 10, { 0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[10*1*7*30] = { 
  /* [0][0][][] */ -30,-17,11,18,50,-32,-37,22,-32,-49,-17,-21,59,47,-10,-12,-36,19,14,-16,61,-31,-17,-49,16,-48,27,-30,-9,-17, -41,-45,-8,-14,29,-22,-5,-20,63,-34,-39,54,-86,36,-40,-7,15,10,-38,-67,-100,11,51,-59,-2,-48,-39,-2,38,-43, 39,-63,-50,-27,-51,-80,-105,11,-31,6,13,-20,-15,-41,-41,36,26,8,-5,45,-72,-28,19,-23,-76,31,-33,-11,-32,3, -9,-17,51,-38,40,-101,-58,-89,-50,-30,-48,-69,-11,-31,3,60,51,41,-24,2,-25,5,-6,-71,-75,-60,67,-69,-21,19, 60,10,61,-93,53,-96,-53,83,24,98,3,-127,76,-42,3,33,-30,48,11,-36,-3,13,-89,-74,1,-24,36,-61,3,-15, 43,-33,9,37,-99,12,44,-1,51,-36,54,13,-15,-81,-70,-100,-49,35,-59,-4,-5,-15,-6,-58,15,-14,33,-78,-20,1, -39,-27,27,-3,-26,20,-6,-34,-54,6,-37,-20,41,16,-92,-26,-7,86,-99,-66,35,18,-30,16,-86,28,-19,-25,2,51, 
  /* [1][0][][] */ -49,1,-26,-6,-7,0,24,-40,-51,-52,-15,-48,-25,-21,-44,-69,-12,-3,-3,-19,-5,-16,1,4,-16,-1,-41,20,-17,-28, -22,-34,15,9,-27,14,19,-45,-18,-9,-33,7,3,19,52,45,-4,1,-26,-12,15,-36,-9,0,-30,15,-49,-24,-6,-29, 17,4,-36,-6,-27,25,19,-60,-2,19,-79,13,-73,-5,13,17,-7,-26,1,11,14,-21,14,-34,-20,18,-81,-18,-46,-29, 13,0,15,11,-18,7,18,-34,60,-37,39,-22,-69,12,-34,26,12,-12,-34,27,-3,-34,24,-4,-18,36,50,-8,-28,12, -88,-119,-3,86,36,-35,26,-49,66,-79,32,-44,31,-8,-30,40,30,-74,44,20,-63,-49,-92,-51,57,40,40,-18,-1,-6, -99,-77,-80,26,19,-80,-6,-3,-7,-51,10,-79,18,-127,-10,-5,81,-51,55,-76,33,24,-82,-5,21,42,13,-10,10,74, -78,-16,-99,-8,-12,-29,-113,-6,-61,-13,-105,16,-5,-69,26,-36,28,-44,12,-73,18,27,-47,-26,73,-41,-54,-29,34,-68, 
  /* [2][0][][] */ -104,-21,-42,-84,-20,-43,-22,-61,-4,-15,-43,-75,-49,-97,-37,-76,-72,11,-91,-50,-1,-86,-61,-8,-19,-33,-52,-92,-23,7, -27,-48,-51,-59,-54,3,40,19,-54,-54,-16,-26,-27,-66,-20,-71,-54,-66,-36,-32,-45,-92,-64,-82,36,-63,-49,-96,-46,-38, 9,10,-9,13,16,74,27,28,6,32,19,0,40,-39,43,-15,19,70,39,-27,73,-22,-19,15,60,-23,-55,59,40,98, -7,2,-3,-23,-26,38,7,-16,38,-44,-22,38,-20,-18,6,4,-31,41,-18,20,62,-54,-4,4,70,-37,-72,22,6,66, -14,-1,13,-17,-36,29,-24,-9,10,-20,-31,42,-46,-9,5,-37,5,96,39,-1,18,-62,-19,38,83,-62,-84,7,10,21, 0,10,12,-8,-22,13,7,5,15,-42,-26,25,-23,-22,-49,-14,22,38,-37,-14,117,-37,-31,-1,26,-42,-86,40,-20,26, 20,-9,-2,11,-43,57,-22,-15,-38,-42,-21,47,-14,-19,-27,-34,-14,118,-9,-63,127,-36,-8,-2,101,-21,-124,-11,-18,62, 
  /* [3][0][][] */ 28,32,17,-60,20,1,42,110,80,49,51,-32,38,-51,-8,10,-70,31,10,-48,-73,6,2,-22,-16,-30,29,24,58,24, 6,25,-7,10,17,-13,45,-39,35,-12,1,23,-3,17,-33,-12,-48,-14,-4,16,-32,-16,-7,-14,8,4,42,-5,-35,11, 8,-22,-18,7,-16,1,-44,-11,3,-7,-34,29,-15,11,-37,38,-19,-54,-19,-31,-22,9,13,-40,-3,9,-33,14,-66,-35, -16,-26,-14,-5,14,-50,-81,-25,-17,-53,-29,-16,-55,11,-28,-13,9,-30,-8,-6,-55,26,-3,-25,-31,-9,-8,-34,-92,-57, 34,-9,5,-2,12,-44,-27,-68,-18,-44,-17,-29,-9,11,29,26,16,-48,-2,18,-52,19,7,-11,-67,-14,30,-8,-26,14, 46,-22,54,-38,36,-50,-24,33,-20,76,-9,-59,45,-12,74,-2,-37,-22,35,7,-64,27,-32,44,-65,-20,0,-25,3,-58, 82,104,63,-97,13,-31,69,56,8,64,65,-56,40,-127,-17,-26,-90,80,-5,16,-17,-5,-61,10,-61,-29,29,-57,23,-56, 
  /* [4][0][][] */ 40,-6,8,-6,-74,47,-62,-88,-54,-11,-93,-8,-123,7,-27,-35,-3,-40,-12,-33,-14,16,15,32,-17,-6,-92,-31,-70,-30, 33,6,-29,1,-60,32,39,-5,-29,11,5,22,-9,45,53,-54,-13,-24,-43,-56,14,59,32,67,-67,11,-13,-59,42,-4, -35,115,-63,-77,-42,-44,64,47,-35,21,50,-30,13,23,54,-55,-13,-39,13,-67,24,-7,-22,81,-75,6,29,-65,33,-28, -84,46,-59,-84,-4,-8,-6,11,-63,5,14,-89,-16,-51,28,3,-106,-53,55,15,-57,10,-76,-40,-33,-4,31,69,33,-20, -29,30,11,5,21,28,38,-19,0,14,5,-36,-23,1,11,61,-28,-27,45,31,-37,-1,-20,10,25,-35,15,64,-66,-7, -26,-20,-15,-8,11,39,31,7,-11,4,-50,17,-8,-25,17,1,-9,-7,22,52,-37,-23,39,8,-5,42,-33,48,9,-9, 53,21,20,-33,-38,15,27,-13,-29,15,-64,-31,46,-8,-55,-18,-36,-21,-70,-1,-127,-16,-1,-38,-17,6,-35,-38,-49,8, 
  /* [5][0][][] */ -5,22,-22,5,-20,30,2,-70,-33,-25,-61,13,-92,8,-43,7,-22,-20,-35,-6,41,-4,-5,4,-25,-11,-121,-1,-68,12, 31,22,-8,-12,-42,16,23,30,-45,-35,-19,7,14,36,25,-53,-21,42,-8,-61,8,14,-14,106,50,8,-71,9,20,10, -3,52,-31,-21,-61,66,15,4,-39,14,-18,56,-1,41,-2,-61,-20,55,-32,-68,36,-2,3,23,-15,-18,-39,-22,26,56, -77,115,-78,-78,-50,-35,52,61,-48,41,27,-11,6,-20,49,-63,-69,-22,25,-79,60,21,-29,127,-36,-31,-11,-39,43,-36, -82,16,-80,-68,-1,48,-12,15,-58,-8,25,2,-25,-37,41,11,-70,2,54,-37,61,42,-24,-6,35,-51,-3,106,25,-12, -6,26,-7,5,-6,16,4,-6,-16,15,22,-20,-27,-2,-17,10,-1,27,19,10,36,-8,-13,28,53,-30,-1,55,-29,28, 20,9,-23,-23,-29,44,53,-1,-42,-13,-8,-17,-11,-13,-42,-26,10,22,3,8,21,-17,-29,41,51,-37,-28,6,-38,27, 
  /* [6][0][][] */ 38,-63,-30,38,32,-52,-14,3,7,38,-67,26,-105,-39,-24,-24,3,-38,14,-65,54,-3,-89,25,-112,31,-27,-92,41,28, -102,-70,8,45,-63,-75,-21,5,28,-98,-22,-80,32,-31,-67,15,46,44,-6,34,10,-77,-92,-72,-77,29,-5,-70,-34,30, -86,-45,-18,13,-95,17,48,-45,-103,43,-42,-12,6,-7,-31,-35,-29,-14,21,-80,-2,49,64,-108,-45,-108,10,-51,72,9, 19,7,47,-12,12,-11,-115,-76,-5,-55,-98,-91,0,-67,-2,-99,42,-26,-59,-93,-76,-91,-9,67,-100,-103,-30,-65,-86,-2, -85,-55,-85,-37,-85,-58,-18,-49,-77,-73,-19,38,-51,-34,-97,-100,33,-93,49,-69,29,54,-72,13,69,-102,-7,-37,-23,-100, 57,51,-44,26,10,-31,45,-85,-17,-105,-4,-45,48,-66,22,-93,53,-11,-16,-88,-87,11,-10,34,49,-6,-12,32,-47,-34, -97,-28,-127,-34,-103,60,-87,-49,57,-81,37,-71,30,-18,19,-52,-74,-99,-18,49,31,6,25,-42,26,35,6,60,-109,-54, 
  /* [7][0][][] */ -25,37,-23,18,-3,-16,-20,-29,59,29,24,36,-22,0,-14,4,-37,0,9,-11,27,33,7,-8,-2,-19,-29,-2,-21,-1, 13,7,-14,-7,-31,-47,-65,-4,-5,-9,-23,-1,-62,-16,-45,34,-26,0,12,-33,-2,-5,-1,-16,36,-22,-50,13,-1,-21, 12,-19,-14,11,4,-23,-54,-25,19,-49,-16,10,-20,34,-7,5,-8,3,-31,-9,16,38,7,-17,25,-6,-56,6,-9,-35, 8,-37,26,-16,31,-39,-43,-51,-51,2,-6,-11,-46,-21,-2,14,21,-5,-4,29,21,5,-11,-36,-65,-36,26,-2,-56,-28, 67,11,64,-86,46,-70,-45,30,-12,62,9,-119,47,-69,57,34,-48,41,-4,37,-8,30,-78,11,-21,-68,25,-25,23,-73, 39,9,46,-81,16,-49,12,27,33,22,21,-26,25,-115,-16,-69,-57,23,-32,-29,-127,-54,-86,-8,-74,-12,19,-63,25,-9, 20,6,22,34,-35,3,41,-38,-2,-20,16,-1,20,-11,-66,-60,-7,-12,-89,-3,-47,-45,-18,-76,-61,51,23,-30,-30,43, 
  /* [8][0][][] */ -36,52,-17,-14,-5,-8,0,-15,-23,-6,6,46,9,-9,7,-7,-33,49,-19,-7,3,11,-13,23,60,-51,-27,17,44,3, 17,-16,-9,-11,-4,-8,21,3,2,-19,-18,28,-17,-44,-14,-16,-37,9,-10,-20,15,-17,-21,-18,21,-22,-18,-4,25,23, -23,-14,-1,13,-27,42,38,-11,12,-63,-22,18,-9,-19,-72,-24,-16,24,-40,-24,4,-81,-12,5,7,-29,-66,6,-29,60, -11,37,-18,-5,11,20,11,49,-37,-4,-12,-5,8,-25,13,-12,-16,72,7,-39,51,-30,-30,5,22,-45,-39,27,23,71, -37,10,2,-29,-25,39,-32,0,-7,-7,-12,9,-30,6,15,7,-19,20,12,-9,54,-24,-18,59,76,-18,-61,31,-9,51, -7,3,15,-16,-25,33,0,18,-22,-2,-29,49,-22,-13,-26,-10,-11,70,-11,-28,71,-22,-33,-15,30,-36,-76,28,-7,17, 12,-39,-6,-2,-9,13,3,11,-3,-12,-40,34,-29,-11,11,-35,2,83,-4,-41,127,-4,-11,48,68,-26,-66,37,-10,43, 
  /* [9][0][][] */ 10,0,2,23,-37,10,24,-62,27,-35,-4,1,-93,14,-75,20,28,20,-43,18,-12,-20,6,4,-22,40,20,-20,-38,-12, -37,-87,2,97,24,-25,37,-27,52,-62,42,-29,33,24,-32,35,24,-54,25,44,-20,-41,-32,-16,44,27,30,-14,0,-1, -80,-57,-46,49,-1,-57,9,-32,21,-60,6,-54,10,-60,-1,-7,78,-90,7,-26,-13,18,-95,-12,28,28,6,-23,12,28, -41,-27,-66,-16,-9,-57,-61,-6,-63,-28,-56,-39,-18,-56,3,3,5,-71,36,-34,9,27,-41,-16,34,-60,-14,-18,11,-57, 10,-5,-10,-7,-25,0,-28,8,-9,-16,-127,-9,-23,10,-11,-32,-5,-13,-4,-37,-23,5,25,-52,47,17,-81,25,4,29, 7,4,9,-4,-26,36,6,-12,-43,-9,-20,10,6,-6,-22,-6,41,20,-24,3,21,-16,14,-26,-43,26,-66,-5,-16,-4, -6,-11,-8,29,3,36,-10,-43,20,7,-7,-11,-40,7,5,-4,9,5,-11,25,11,-22,-13,-26,-48,10,-33,2,-82,-4, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 10,1,7,30 } };
const TfArray<10, float> quant9_scale = { 10, { 0.0020602706354111433, 0.0030608465895056725, 0.0025340842548757792, 0.0036543512251228094, 0.0032516464125365019, 0.003059848677366972, 0.0015173719730228186, 0.0040459600277245045, 0.0035292778629809618, 0.0034859119914472103, } };
const TfArray<10, int> quant9_zero = { 10, { 0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 49, 13, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[3] = { 1, 49, 30, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 49, 1, 30, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[4] = { 1, 1, 7, 30, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data14[3] = { 1, 7, 10, };
const TfArray<1, int> tensor_dimension14 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 7, 1, 10, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,49,13 } };
const TfArray<1, float> quant16_scale = { 1, { 0.046360891312360764, } };
const TfArray<1, int> quant16_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,49,30 } };
const TfArray<1, float> quant17_scale = { 1, { 0.052180774509906769, } };
const TfArray<1, int> quant17_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<3, int> tensor_dimension18 = { 3, { 1,49,30 } };
const TfArray<1, float> quant18_scale = { 1, { 0.052180774509906769, } };
const TfArray<1, int> quant18_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<3, int> tensor_dimension19 = { 3, { 1,49,30 } };
const TfArray<1, float> quant19_scale = { 1, { 0.025518102571368217, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,49,1,30 } };
const TfArray<1, float> quant20_scale = { 1, { 0.025518102571368217, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,7,1,30 } };
const TfArray<1, float> quant21_scale = { 1, { 0.025518102571368217, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,7,30 } };
const TfArray<1, float> quant22_scale = { 1, { 0.025518102571368217, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,7,10 } };
const TfArray<1, float> quant23_scale = { 1, { 0.089272730052471161, } };
const TfArray<1, int> quant23_zero = { 1, { 33 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,7,10 } };
const TfArray<1, float> quant24_scale = { 1, { 0.089272730052471161, } };
const TfArray<1, int> quant24_zero = { 1, { 33 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,7,10 } };
const TfArray<1, float> quant25_scale = { 1, { 0.033199332654476166, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,7,1,10 } };
const TfArray<1, float> quant26_scale = { 1, { 0.033199332654476166, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,1,1,10 } };
const TfArray<1, float> quant27_scale = { 1, { 0.033199332654476166, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,10 } };
const TfArray<1, float> quant28_scale = { 1, { 0.033199332654476166, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,4 } };
const TfArray<1, float> quant29_scale = { 1, { 0.10726042091846466, } };
const TfArray<1, int> quant29_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,4 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,10 } };
const TfArray<1, int> outputs0 = { 1, { 16 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 16,7,6 } };
const TfArray<1, int> outputs1 = { 1, { 17 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 17,11 } };
const TfArray<1, int> outputs2 = { 1, { 18 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 18,2 } };
const TfArray<1, int> outputs3 = { 1, { 19 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 19,12 } };
const TfArray<1, int> outputs4 = { 1, { 20 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,7, 1,7, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 21,13 } };
const TfArray<1, int> outputs6 = { 1, { 22 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 22,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 23 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 23,14 } };
const TfArray<1, int> outputs8 = { 1, { 24 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 24,3 } };
const TfArray<1, int> outputs9 = { 1, { 25 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 25,15 } };
const TfArray<1, int> outputs10 = { 1, { 26 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,7, 1,7, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 26 } };
const TfArray<1, int> outputs11 = { 1, { 27 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 27,1 } };
const TfArray<1, int> outputs12 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 28,5,4 } };
const TfArray<1, int> outputs13 = { 1, { 29 } };
const TfLiteSoftmaxParams opdata14 = { 1 };
const TfArray<1, int> inputs14 = { 1, { 29 } };
const TfArray<1, int> outputs14 = { 1, { 30 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension0, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 2730, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 2100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1472, (TfLiteIntArray*)&tensor_dimension17, 1470, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 1470, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1472, (TfLiteIntArray*)&tensor_dimension19, 1470, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 1470, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1472, (TfLiteIntArray*)&tensor_dimension21, 210, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 210, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension23, 70, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 70, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80, (TfLiteIntArray*)&tensor_dimension25, 70, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension26, 70, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 80, (TfLiteIntArray*)&tensor_dimension27, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension29, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %u\n", bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  current_location = tensor_arena + kTensorArenaSize;
  tensor_boundary = tensor_arena;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 31;
  for(size_t i = 0; i < 31; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
      uint8_t* end = start + tensorData[i].bytes;

     tflTensors[i].data.data =  start;

     if (end > tensor_boundary) {
       tensor_boundary = end;
     }
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 15; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 15; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  30, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 15; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
  free_fnc(tensor_arena);
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
